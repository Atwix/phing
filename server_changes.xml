<?xml version="1.0" ?>
<project name="get-server-changes" basedir="." default="build">
<property name="version" value="1.0" />
<!-- Files working copy path -->
<property name="repo.dir" value="../public" />
<!-- Name of the brench with server's changeset -->
<property name="server.branch" value="server" />
<!-- A name of the main git remote -->
<property name="remote.name" value="origin" />
<!-- Run files sync in verbose mode -->
<property name="sync.verbose" value="true" />
<!-- Run files sync with no files changes, just to test the process -->
<property name="dryrun" value="false" />

<resolvepath propertyName="repo.dir.resolved" file="${repo.dir}" />

<!-- Public targets -->

<target name="sync-files" description="Copy files">
  <phingcall target="-sync-execute-task"/>
</target>

<target name="dryrun" description="Force files sync process do not write the changes. Just list">
  <property name="files.sync.dryrun" value="true" override="true" />
</target>

<target name="initial-branching" description="Checkout git branch for storing server changes">
  <!-- Fetch repository -->
  <phingcall target="-fetch-branches" />
  <!-- Checkout 'master' branch -->
  <phingcall target="-checkout-master" />
  <!-- Remove old 'server' branch -->
  <phingcall target="-remove-server-branch" />
  <!-- Pull latest changes from 'master' -->
  <phingcall target="-pull-master" />
  <!-- Create new 'server' branch from 'master' -->
  <phingcall target="-create-server-branch" />
</target>
<target name="save-changes" description="Commit changes to the server branch" >
  <!-- Add all changes to the git working tree -->
  <exec command="git add . 2>&amp;1" dir="${repo.dir.resolved}" passthru="true" /> 
  <exec command="git commit -am 'Changes from the server' 2>&amp;1" dir="${repo.dir.resolved}" passthru="true" />
  <!-- Push all changes to the 'server' branch -->
  <phingcall target="-push-server-branch" />
</target>

<!-- Private targets -->
<target name="-checkout-master" description="Checkout master branch">
  <gitcheckout
      repository="${repo.dir.resolved}" 
      branchname="master" quiet="false" create="false" />
</target>
<target name="-remove-server-branch" description="Remove server branch from repo">
  <exec command="git branch -D ${server.branch} 2>&amp;1" dir="${repo.dir.resolved}" passthru="true"/>
  <exec command="git push ${remote.name} :${server.branch} 2>&amp;1" dir="${repo.dir.resolved}" passthru="true"/>
</target>
<target name="-fetch-branches" description="Fetch git branches">
  <exec command="git fetch -p 2>&amp;1" dir="${repo.dir.resolved}" passthru="true"/>
</target>
<target name="-pull-master" description="Pull changes from remote master">
  <gitpull
      repository="${repo.dir.resolved}" refspec="master" 
      strategy="recursive"
      source="${remote.name}" />
</target>
<target name="-create-server-branch" description="Create 'server' branch">
  <gitcheckout
      repository="${repo.dir.resolved}" 
      branchname="${server.branch}" quiet="false" create="true" />
</target>
<target name="-push-server-branch" description="Push 'server' branch" >
  <exec command="git push ${remote.name} ${server.branch} 2>&amp;1" dir="${repo.dir.resolved}" passthru="true" />
</target>
<target name="-current-ignore-patterns" description="Show all patterns from sync ignore list">
  <exec command="cat ${sync.exclude.file}" passthru="true" />
</target>
<target name="-init-files-sync" description="Load main settings">
  <tstamp />
  <property file="build.properties" />
</target>

<target name="-sync-execute-task" depends="-init-files-sync">
  <property file="sync.properties" />
  <if>
    <not>
      <isset property="sync.verbose" />
    </not>
    <then>
      <property name="sync.verbose" value="true" override="true" />
      <echo message="The value of sync.verbose has been set to true" />
    </then>
  </if>
  <!-- Display current ignore files list for rsync -->
  <phingcall target="-current-ignore-patterns" />

  <property name="sync.remote.auth" value="${sync.remote.user}@${sync.remote.host}" />
  <taskdef name="sync" classname="phing.tasks.ext.FileSyncTask" />
  <sync
    sourcedir="${sync.remote.auth}:${sync.destination.projectdir}"
    destinationdir="${sync.source.projectdir}"
    excludefile="${sync.exclude.file}"
    dryrun="${dryrun}"   
    checksum="true"
    verbose="${sync.verbose}" />
</target>
</project>
